#! /usr/bin/env ruby
# frozen_string_literal: true

require "bundler/inline"

gemfile true do
  source "https://rubygems.org"

  gem "benchmark-ips"
  gem "dry-struct"
end

Warning[:performance] = false

require "ostruct"

DataDefault = Data.define :a, :b, :c, :d, :e

DataCustom = Data.define :a, :b, :c, :d, :e do
  def initialize a: 1, b: 2, c: 3, d: 4, e: 5
    super
  end
end

StructDefault = Struct.new :a, :b, :c, :d, :e

StructCustom = Struct.new :a, :b, :c, :d, :e do
  def initialize a: 1, b: 2, c: 3, d: 4, e: 5
    super
  end
end

module Types
  include Dry.Types
end

DryExample = Class.new Dry::Struct do
  attribute :a, Types::Strict::Integer
  attribute :b, Types::Strict::Integer
  attribute :c, Types::Strict::Integer
  attribute :d, Types::Strict::Integer
  attribute :e, Types::Strict::Integer
end

Benchmark.ips do |benchmark|
  benchmark.config time: 5, warmup: 2

  benchmark.report("Data (positional)") { DataDefault[1, 2, 3, 4, 5] }
  benchmark.report("Data (keyword)") { DataDefault[a: 1, b: 2, c: 3, d: 4, e: 5] }
  benchmark.report("Data (custom)") { DataCustom.new }
  benchmark.report("Struct (positional)") { StructDefault[1, 2, 3, 4, 5] }
  benchmark.report("Struct (keyword)") { StructDefault[a: 1, b: 2, c: 3, d: 4, e: 5] }
  benchmark.report("Struct (custom)") { StructCustom.new }
  benchmark.report("OpenStruct") { OpenStruct.new a: 1, b: 2, c: 3, d: 4, e: 5 }
  benchmark.report("Dry Struct") { DryExample[a: 1, b: 2, c: 3, d: 4, e: 5] }

  benchmark.compare!
end

__END__

ruby 3.3.0 (2023-12-25 revision 5124f9ac75) +YJIT [arm64-darwin22.6.0]
Warming up --------------------------------------
   Data (positional)   263.219k i/100ms
      Data (keyword)   268.831k i/100ms
       Data (custom)   180.464k i/100ms
 Struct (positional)   613.904k i/100ms
    Struct (keyword)   253.435k i/100ms
     Struct (custom)   248.250k i/100ms
          OpenStruct   513.000 i/100ms
          Dry Struct    87.480k i/100ms
Calculating -------------------------------------
   Data (positional)      2.752M (±10.4%) i/s -     13.687M in   5.027436s
      Data (keyword)      2.780M (±10.4%) i/s -     13.979M in   5.082351s
       Data (custom)      1.774M (± 2.4%) i/s -      9.023M in   5.088151s
 Struct (positional)      6.830M (± 1.7%) i/s -     34.379M in   5.035416s
    Struct (keyword)      2.662M (±10.2%) i/s -     13.432M in   5.099726s
     Struct (custom)      2.588M (±10.1%) i/s -     12.909M in   5.040115s
          OpenStruct      1.631k (±19.3%) i/s -      8.208k in   5.213960s
          Dry Struct    886.556k (±10.9%) i/s -      4.461M in   5.097822s

Comparison:
 Struct (positional):  6829526.2 i/s
      Data (keyword):  2780207.2 i/s - 2.46x  slower
   Data (positional):  2751887.0 i/s - 2.48x  slower
    Struct (keyword):  2661762.5 i/s - 2.57x  slower
     Struct (custom):  2587550.8 i/s - 2.64x  slower
       Data (custom):  1774425.0 i/s - 3.85x  slower
          Dry Struct:   886556.5 i/s - 7.70x  slower
          OpenStruct:     1630.7 i/s - 4188.06x  slower

ℹ️ `Data` is fastest when members are small (like three or less) but performance degrades when more members are added (like five or more). This is because `Data` always initializes with a `Hash` which is not the case with a `Struct`. Additionally, passing keyword arguments to/from Ruby to Ruby is optimized while to/from Ruby/C is not.
