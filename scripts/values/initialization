#! /usr/bin/env ruby
# frozen_string_literal: true

require "bundler/inline"

gemfile true do
  source "https://rubygems.org"

  gem "benchmark-ips"
  gem "dry-struct"
end

Warning[:performance] = false

require "ostruct"

DataDefault = Data.define :a, :b, :c, :d, :e

DataCustom = Data.define :a, :b, :c, :d, :e do
  def initialize a: 1, b: 2, c: 3, d: 4, e: 5
    super
  end
end

StructDefault = Struct.new :a, :b, :c, :d, :e

StructCustom = Struct.new :a, :b, :c, :d, :e do
  def initialize a: 1, b: 2, c: 3, d: 4, e: 5
    super
  end
end

module Types
  include Dry.Types
end

DryExample = Class.new Dry::Struct do
  attribute :a, Types::Strict::Integer
  attribute :b, Types::Strict::Integer
  attribute :c, Types::Strict::Integer
  attribute :d, Types::Strict::Integer
  attribute :e, Types::Strict::Integer
end

Benchmark.ips do |benchmark|
  benchmark.config time: 5, warmup: 2

  benchmark.report("Data (positional)") { DataDefault[1, 2, 3, 4, 5] }
  benchmark.report("Data (keyword)") { DataDefault[a: 1, b: 2, c: 3, d: 4, e: 5] }
  benchmark.report("Data (custom)") { DataCustom.new }
  benchmark.report("Struct (positional)") { StructDefault[1, 2, 3, 4, 5] }
  benchmark.report("Struct (keyword)") { StructDefault[a: 1, b: 2, c: 3, d: 4, e: 5] }
  benchmark.report("Struct (custom)") { StructCustom.new }
  benchmark.report("OpenStruct") { OpenStruct.new a: 1, b: 2, c: 3, d: 4, e: 5 }
  benchmark.report("Dry Struct") { DryExample[a: 1, b: 2, c: 3, d: 4, e: 5] }

  benchmark.compare!
end

__END__

Warming up --------------------------------------
   Data (positional)   244.204k i/100ms
      Data (keyword)   250.725k i/100ms
       Data (custom)   212.981k i/100ms
 Struct (positional)   651.226k i/100ms
    Struct (keyword)   235.496k i/100ms
     Struct (custom)   227.346k i/100ms
          OpenStruct   775.000  i/100ms
          Dry Struct    80.619k i/100ms
Calculating -------------------------------------
   Data (positional)      2.688M (± 3.9%) i/s -     13.431M in   5.003434s
      Data (keyword)      2.648M (± 4.4%) i/s -     13.288M in   5.027074s
       Data (custom)      2.392M (± 2.7%) i/s -     12.140M in   5.079651s
 Struct (positional)      8.277M (± 5.1%) i/s -     41.678M in   5.047248s
    Struct (keyword)      2.611M (± 4.2%) i/s -     13.188M in   5.058964s
     Struct (custom)      2.463M (± 4.1%) i/s -     12.504M in   5.084992s
          OpenStruct      2.591k (±23.6%) i/s -     13.175k in   5.364353s
          Dry Struct    826.845k (± 2.7%) i/s -      4.192M in   5.073777s

Comparison:
 Struct (positional):  8276658.4 i/s
   Data (positional):  2687981.7 i/s - 3.08x  slower
      Data (keyword):  2648371.8 i/s - 3.13x  slower
    Struct (keyword):  2610747.0 i/s - 3.17x  slower
     Struct (custom):  2462808.2 i/s - 3.36x  slower
       Data (custom):  2391614.9 i/s - 3.46x  slower
          Dry Struct:   826844.7 i/s - 10.01x  slower
          OpenStruct:     2590.9 i/s - 3194.56x  slower

ℹ️ `Data` is fastest when members are small (like three or less) but performance degrades when more members are added (like five or more). This is because `Data` always initializes with a `Hash` which is not the case with a `Struct`. Additionally, passing keyword arguments to/from Ruby to Ruby is optimized while to/from Ruby/C is not.
