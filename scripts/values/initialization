#! /usr/bin/env ruby
# frozen_string_literal: true

require "bundler/inline"

gemfile true do
  source "https://rubygems.org"

  gem "benchmark-ips"
  gem "dry-struct"
end

Warning[:performance] = false

require "ostruct"

DataDefault = Data.define :a, :b, :c, :d, :e

DataCustom = Data.define :a, :b, :c, :d, :e do
  def initialize a: 1, b: 2, c: 3, d: 4, e: 5
    super
  end
end

StructDefault = Struct.new :a, :b, :c, :d, :e

StructCustom = Struct.new :a, :b, :c, :d, :e do
  def initialize a: 1, b: 2, c: 3, d: 4, e: 5
    super
  end
end

module Types
  include Dry.Types
end

DryExample = Class.new Dry::Struct do
  attribute :a, Types::Strict::Integer
  attribute :b, Types::Strict::Integer
  attribute :c, Types::Strict::Integer
  attribute :d, Types::Strict::Integer
  attribute :e, Types::Strict::Integer
end

Benchmark.ips do |benchmark|
  benchmark.config time: 5, warmup: 2

  benchmark.report("Data (positional)") { DataDefault[1, 2, 3, 4, 5] }
  benchmark.report("Data (keyword)") { DataDefault[a: 1, b: 2, c: 3, d: 4, e: 5] }
  benchmark.report("Data (custom)") { DataCustom.new }
  benchmark.report("Struct (positional)") { StructDefault[1, 2, 3, 4, 5] }
  benchmark.report("Struct (keyword)") { StructDefault[a: 1, b: 2, c: 3, d: 4, e: 5] }
  benchmark.report("Struct (custom)") { StructCustom.new }
  benchmark.report("OpenStruct") { OpenStruct.new a: 1, b: 2, c: 3, d: 4, e: 5 }
  benchmark.report("Dry Struct") { DryExample[a: 1, b: 2, c: 3, d: 4, e: 5] }

  benchmark.compare!
end

__END__

ruby 3.3.0 (2023-12-25 revision 5124f9ac75) +YJIT [arm64-darwin23.4.0]
Warming up --------------------------------------
   Data (positional)   304.848k i/100ms
      Data (keyword)   317.019k i/100ms
       Data (custom)   224.669k i/100ms
 Struct (positional)   722.167k i/100ms
    Struct (keyword)   302.062k i/100ms
     Struct (custom)   292.850k i/100ms
          OpenStruct   743.000 i/100ms
          Dry Struct   111.304k i/100ms
Calculating -------------------------------------
   Data (positional)      3.120M (± 9.7%) i/s -     15.547M in   5.025792s
      Data (keyword)      3.191M (± 9.7%) i/s -     15.851M in   5.008582s
       Data (custom)      2.226M (± 3.6%) i/s -     11.233M in   5.054091s
 Struct (positional)      6.869M (±10.4%) i/s -     34.664M in   5.098769s
    Struct (keyword)      3.059M (± 9.6%) i/s -     15.405M in   5.077727s
     Struct (custom)      2.945M (±11.4%) i/s -     14.642M in   5.031281s
          OpenStruct      1.856k (±24.0%) i/s -      9.659k in   5.485483s
          Dry Struct      1.123M (±11.8%) i/s -      5.565M in   5.029750s

Comparison:
 Struct (positional):  6868838.9 i/s
      Data (keyword):  3191343.7 i/s - 2.15x  slower
   Data (positional):  3120155.8 i/s - 2.20x  slower
    Struct (keyword):  3059412.6 i/s - 2.25x  slower
     Struct (custom):  2945238.4 i/s - 2.33x  slower
       Data (custom):  2225751.7 i/s - 3.09x  slower
          Dry Struct:  1123063.3 i/s - 6.12x  slower
          OpenStruct:     1855.9 i/s - 3701.01x  slower

ℹ️ `Data` is fastest when members are small (like three or less) but performance degrades when more members are added (like five or more). This is because `Data` always initializes with a `Hash` which is not the case with a `Struct`. Additionally, passing keyword arguments to/from Ruby to Ruby is optimized while to/from Ruby/C is not.
